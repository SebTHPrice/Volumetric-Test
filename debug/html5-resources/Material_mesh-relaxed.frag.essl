#version 300 es
precision mediump float;
precision mediump int;

in vec3 wnormal;
in vec2 texCoord;
out vec4 fragColor[2];

vec3 tex_checker(vec3 co, vec3 col1, vec3 col2, float scale)
{
    vec3 p = (co + vec3(9.9999897429370321333408355712891e-07)) * scale;
    float xi = abs(floor(p.x));
    float yi = abs(floor(p.y));
    float zi = abs(floor(p.z));
    bool check = (mod(xi, 2.0) == mod(yi, 2.0)) == (mod(zi, 2.0) != 0.0);
    bvec3 _104 = bvec3(check);
    return vec3(_104.x ? col1.x : col2.x, _104.y ? col1.y : col2.y, _104.z ? col1.z : col2.z);
}

vec2 octahedronWrap(vec2 v)
{
    return (vec2(1.0) - abs(v.yx)) * vec2((v.x >= 0.0) ? 1.0 : (-1.0), (v.y >= 0.0) ? 1.0 : (-1.0));
}

float packFloatInt16(float f, uint i)
{
    return (0.06248569488525390625 * f) + (0.06250095367431640625 * float(i));
}

float packFloat2(float f1, float f2)
{
    return floor(f1 * 255.0) + min(f2, 0.9900000095367431640625);
}

void main()
{
    vec3 n = normalize(wnormal);
    vec3 TextureCoordinate_UV_res = vec3(texCoord.x, 1.0 - texCoord.y, 0.0);
    vec3 CheckerTexture_Color_res = tex_checker(TextureCoordinate_UV_res, vec3(0.4056046307086944580078125), vec3(0.2261308133602142333984375), 5.0);
    vec3 basecol = CheckerTexture_Color_res;
    float roughness = ((((CheckerTexture_Color_res.x * 0.300000011920928955078125) + (CheckerTexture_Color_res.y * 0.589999973773956298828125)) + (CheckerTexture_Color_res.z * 0.10999999940395355224609375)) / 3.0) * 2.5;
    float metallic = 0.0;
    float occlusion = 1.0;
    float specular = 0.0;
    n /= vec3((abs(n.x) + abs(n.y)) + abs(n.z));
    vec2 _173;
    if (n.z >= 0.0)
    {
        _173 = n.xy;
    }
    else
    {
        _173 = octahedronWrap(n.xy);
    }
    n = vec3(_173.x, _173.y, n.z);
    fragColor[0] = vec4(n.xy, roughness, packFloatInt16(metallic, 0u));
    fragColor[1] = vec4(basecol, packFloat2(occlusion, specular));
}

